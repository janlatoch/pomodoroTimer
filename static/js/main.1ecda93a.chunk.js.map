{"version":3,"sources":["constants/mode.js","services/timeServices.js","components/TimePicker.jsx","components/Timer.jsx","hooks/useTimer.js","serviceWorker.js","index.js"],"names":["mode","getTimeMode","modeToCheck","actualWorkTime","actualBreakTime","actualMeditationTime","getTime","time","seconds","hours","Math","floor","getHours","minutes","getMinutes","secondsToSet","getSeconds","getTimeToSet","event","newTime","split","length","push","parseInt","getNewTime","target","value","TimePicker","actualMode","isPause","onTimeChange","Fragment","TextField","id","type","disabled","InputLabelProps","shrink","defaultValue","onChange","inputProps","step","Timer","React","useState","setActualWorkTime","settedWorkTime","setSettedWorkTime","setActualBreakTime","settedBreakTime","setSettedBreakTime","setActualMeditationTime","settedMeditationTime","setSettedMeditationTime","setActualMode","setIsPause","useEffect","timer","clearInterval","setInterval","onMeditationTimeChange","timeToSet","getMeditationBreakTimeLabel","modeTime","onBreakTimeChange","getActualWorkTimeLabel","getActualBreakTimeLabel","onStopTimer","onWorkTimeChange","getActualTimeOnActualMode","useTimer","className","getModeAnimationClass","Typography","variant","component","align","color","getModeColor","Grid","container","direction","justify","alignItems","spacing","item","xs","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAAMA,EACU,aADVA,EAEK,QAFLA,EAGI,OCyBGC,EAAc,SAAC,GAA0E,IAAzEC,EAAwE,EAAxEA,YAAaC,EAA2D,EAA3DA,eAAgBC,EAA2C,EAA3CA,gBAAiBC,EAA0B,EAA1BA,qBACvE,OAAQH,GACJ,KAAKF,EACD,OAAOG,EACX,KAAKH,EACD,OAAOI,EACX,KAAKJ,EACD,OAAOK,EACX,QACI,OAAOF,IAING,EAAU,SAAAC,GAAI,gBAlBV,SAAAC,GACb,IAAMC,EAAQC,KAAKC,MAAMH,EAAU,MACnC,OAAOC,EAAQ,GAAK,IAAMA,EAAQA,EAgBJG,CAASL,GAAhB,YAvBR,SAAAC,GACf,IAAMK,EAAUH,KAAKC,MAAMH,EAAU,IACrC,OAAOK,EAAU,GAAK,IAAMA,EAAUA,EAqBUC,CAAWP,GAApC,YA5BR,SAAAC,GACf,IAAMO,EAAeP,EAAU,GAC/B,OAAOO,EAAe,GAAK,IAAMA,EAAeA,EA0BoBC,CAAWT,KAEtEU,EAAe,SAAAC,GAAU,IAAD,EAzCX,SAAAX,GACtB,IAAMY,EAAUZ,EAAKa,MAAM,KAO3B,OANuB,IAAnBD,EAAQE,QACRF,EAAQG,KAAK,MAKV,CAAEb,MAHKc,SAASJ,EAAQ,IAGfN,QAFAU,SAASJ,EAAQ,IAERX,QADTe,SAASJ,EAAQ,KAmCGK,CAAWN,EAAMO,OAAOC,OAG5D,OAF0B,KAFO,EACzBjB,MACmC,GAFV,EAClBI,QADkB,EACTL,S,gCCZbmB,EA7BI,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,WAAYC,EAA2C,EAA3CA,QAASvB,EAAkC,EAAlCA,QAASwB,EAAyB,EAAzBA,aAAc9B,EAAW,EAAXA,KAE9D,OACI,kBAAC,IAAM+B,SAAP,KACKH,IAAe5B,IAAS6B,GAAW,kBAACG,EAAA,EAAD,CAChCC,GAAG,OACHC,KAAK,OACLC,UAAU,EACVT,MAAOpB,IACP8B,gBAAiB,CACbC,QAAQ,MAGdT,IAAe5B,GAAQ6B,IAAY,kBAACG,EAAA,EAAD,CACjCC,GAAG,OACHC,KAAK,OACLI,aAAchC,IACdiC,SAAUT,EACVM,gBAAiB,CACbC,QAAQ,GAEZG,WAAY,CACRC,KAAM,SC+DXC,G,MAjFD,WAAO,IAAD,ECCH,WAAO,IAAD,EACyBC,IAAMC,SAL9B,KAID,mBACZzC,EADY,KACI0C,EADJ,OAEyBF,IAAMC,SAN9B,KAID,mBAEZE,EAFY,KAEIC,EAFJ,OAG2BJ,IAAMC,SAL/B,KAEF,mBAGZxC,EAHY,KAGK4C,EAHL,OAI2BL,IAAMC,SAN/B,KAEF,mBAIZK,EAJY,KAIKC,EAJL,OAKqCP,IAAMC,SARpC,IAGP,mBAKZvC,EALY,KAKU8C,EALV,OAMqCR,IAAMC,SATpC,IAGP,mBAMZQ,EANY,KAMUC,EANV,OAQiBV,IAAMC,SAAS5C,GARhC,mBAQZ4B,EARY,KAQA0B,EARA,OAUWX,IAAMC,UAAS,GAV1B,mBAUZf,EAVY,KAUH0B,EAVG,KAYnBZ,IAAMa,WAAU,WACRrD,EAAiB,IACjBmD,EAActD,GACd6C,EAAkBC,MAEvB,CAAC3C,IAEJwC,IAAMa,WAAU,WACRpD,EAAkB,IAClBkD,EAActD,GACdgD,EAAmBC,MAExB,CAAC7C,IAEJuC,IAAMa,WAAU,WACRnD,EAAuB,IACvBiD,EAActD,GACdmD,EAAwBC,MAE7B,CAAC/C,IAGJsC,IAAMa,WAAU,WACZ,IAAIC,EAAQ,KAeZ,OAdK5B,EAUMA,GACP6B,cAAcD,GAVdA,EAAQE,aAAY,WACZ/B,IAAe5B,EACf6C,GAAkB,SAAA1C,GAAc,OAAIA,EAAiB,KAC9CyB,IAAe5B,EACtBmD,GAAwB,SAAA9C,GAAoB,OAAIA,EAAuB,KAEvE2C,GAAmB,SAAA7C,GAAc,OAAIA,EAAiB,OAE3D,KAKA,kBAAMuD,cAAcD,MAC5B,CAAC7B,EAAYC,IA+ChB,MAAO,CAAE+B,uBAtBsB,SAAA1C,GAC3B,IAAM2C,EAAY5C,EAAaC,GAE/BiC,EAAwBU,GACxBR,EAAwBQ,IAkBKC,4BALG,WAChC,IAAMC,EAAW9D,EAAY,CAAEC,YAAaF,EAAiBG,iBAAgBC,kBAAiBC,yBAC9F,OAAOC,EAAQyD,IAG2CC,kBA7BpC,SAAA9C,GACtB,IAAM2C,EAAY5C,EAAaC,GAE/B8B,EAAmBa,GACnBX,EAAmBW,IAyB0DhC,UAASoC,uBAf3D,WAC3B,IAAMF,EAAW9D,EAAY,CAAEC,YAAaF,EAAWG,iBAAgBC,kBAAiBC,yBACxF,OAAOC,EAAQyD,IAa+FG,wBAVlF,WAC5B,IAAMH,EAAW9D,EAAY,CAAEC,YAAaF,EAAYG,iBAAgBC,kBAAiBC,yBACzF,OAAOC,EAAQyD,IAQwHI,YA7CvH,WAChBZ,GAAY1B,IA4CwIuC,iBApC/H,SAAAlD,GACrB,IAAM2C,EAAY5C,EAAaC,GAE/B2B,EAAkBgB,GAClBd,EAAkBc,IAgCoJjC,aAAYyC,0BAzCpJ,WAC9B,IAAMN,EAAW9D,EAAY,CAAEC,YAAa0B,EAAYzB,iBAAgBC,kBAAiBC,yBACzF,OAAOC,EAAQyD,KD1DgMO,GAA3MV,EAFQ,EAERA,uBAAwBE,EAFhB,EAEgBA,4BAA6BE,EAF7C,EAE6CA,kBAAmBnC,EAFhE,EAEgEA,QAASoC,EAFzE,EAEyEA,uBAAwBC,EAFjG,EAEiGA,wBAAyBC,EAF1H,EAE0HA,YAAaC,EAFvI,EAEuIA,iBAAkBxC,EAFzJ,EAEyJA,WAAYyC,EAFrK,EAEqKA,0BA6BrL,OACI,yBAAKE,UAfqB,SAAA3C,GAC1B,OAAQA,GACJ,KAAK5B,EACD,MAAO,OACX,KAAKA,EACD,MAAO,QACX,KAAKA,EACD,MAAO,aACX,QACI,MAAO,QAMCwE,CAAsB5C,IAClC,kBAAC6C,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,IAAIC,MAAM,UACxCP,KAEL,kBAACI,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,IAAIC,MAAM,SAASC,MAhCzC,SAAAjD,GACjB,OAAQA,GACJ,KAAK5B,EACD,MAAO,YACX,KAAKA,EACD,MAAO,UACX,KAAKA,EACD,MAAO,UACX,QACI,MAAO,aAuBkD8E,CAAalD,IACrEA,GAEL,kBAACmD,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,QAAS,GAET,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,IAAE,EAACN,WAAS,EACnBC,UAAU,MACVC,QAAQ,SACRC,WAAW,UACX,kBAAC,EAAD,CAAYnF,KAAK,aAAa4B,WAAYA,EAAYC,QAASA,EAASvB,QAASwD,EAA6BhC,aAAc8B,KAEhI,kBAACmB,EAAA,EAAD,CAAMM,MAAI,EAACC,IAAE,EACTN,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UACX,kBAAC,EAAD,CAAYnF,KAAMA,EAAW4B,WAAYA,EAAYC,QAASA,EAASvB,QAAS2D,EAAwBnC,aAAcsC,KAE1H,kBAACW,EAAA,EAAD,CAAMM,MAAI,EAACC,IAAE,EAACN,WAAS,EACnBC,UAAU,MACVC,QAAQ,SACRC,WAAW,UACX,kBAAC,EAAD,CAAYnF,KAAMA,EAAY4B,WAAYA,EAAYC,QAASA,EAASvB,QAAS4D,EAAyBpC,aAAckC,MAGhI,kBAACe,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,QAAS,GAET,kBAACG,EAAA,EAAD,CAAQb,QAAQ,YAAYG,MAAM,UAAUW,QAASrB,GAChDtC,EAAU,QAAU,aErErB4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1ecda93a.chunk.js","sourcesContent":["const mode = {\r\n    MEDITATION: \"MEDITATION\",\r\n    BREAK: \"BREAK\",\r\n    WORK: \"WORK\",\r\n}\r\n\r\nexport {mode}","import {mode} from \"../constants/mode\"\r\n\r\nexport const getNewTime = time => {\r\n    const newTime = time.split(\":\");\r\n    if (newTime.length === 2) {\r\n        newTime.push(\"00\")\r\n    }\r\n    const hours = parseInt(newTime[0])\r\n    const minutes = parseInt(newTime[1])\r\n    const seconds = parseInt(newTime[2])\r\n    return { hours, minutes, seconds }\r\n}\r\n\r\nconst getSeconds = seconds => {\r\n    const secondsToSet = seconds % 60\r\n    return secondsToSet < 10 ? \"0\" + secondsToSet : secondsToSet\r\n}\r\n\r\nconst getMinutes = seconds => {\r\n    const minutes = Math.floor(seconds / 60)\r\n    return minutes < 10 ? \"0\" + minutes : minutes\r\n}\r\n\r\nconst getHours = seconds => {\r\n    const hours = Math.floor(seconds / 3600)\r\n    return hours < 10 ? \"0\" + hours : hours\r\n}\r\n\r\nexport const getTimeMode = ({modeToCheck, actualWorkTime, actualBreakTime, actualMeditationTime}) => {\r\n    switch (modeToCheck) {\r\n        case mode.WORK:\r\n            return actualWorkTime\r\n        case mode.BREAK:\r\n            return actualBreakTime\r\n        case mode.MEDITATION:\r\n            return actualMeditationTime\r\n        default:\r\n            return actualWorkTime\r\n    }\r\n}\r\n\r\nexport const getTime = time => `${getHours(time)}:${getMinutes(time)}:${getSeconds(time)}`\r\n   \r\nexport const getTimeToSet = event => {\r\n    const { hours, minutes, seconds } = getNewTime(event.target.value)\r\n    const timeToSet = hours * 3600 + minutes * 60 + seconds\r\n\r\n    return timeToSet\r\n}","import React from \"react\"\r\nimport { TextField } from '@material-ui/core';\r\n\r\nconst TimePicker = ({ actualMode, isPause, getTime, onTimeChange, mode }) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {actualMode === mode && !isPause && <TextField\r\n                id=\"time\"\r\n                type=\"time\"\r\n                disabled={true}\r\n                value={getTime()}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />}\r\n            {(actualMode !== mode || isPause) && <TextField\r\n                id=\"time\"\r\n                type=\"time\"\r\n                defaultValue={getTime()}\r\n                onChange={onTimeChange}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                inputProps={{\r\n                    step: 300\r\n                }}\r\n            />}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TimePicker","import React from \"react\"\r\nimport { useTimer } from \"../hooks/useTimer\"\r\nimport { Typography, Button, Grid } from '@material-ui/core';\r\nimport TimePicker from \"./TimePicker\"\r\nimport { mode } from \"../constants/mode\"\r\nimport '../App.css';\r\n\r\nconst Timer = () => {\r\n\r\n    const { onMeditationTimeChange, getMeditationBreakTimeLabel, onBreakTimeChange, isPause, getActualWorkTimeLabel, getActualBreakTimeLabel, onStopTimer, onWorkTimeChange, actualMode, getActualTimeOnActualMode } = useTimer()\r\n\r\n    const getModeColor = actualMode => {\r\n        switch (actualMode) {\r\n            case mode.WORK:\r\n                return \"secondary\"\r\n            case mode.BREAK:\r\n                return \"default\"\r\n            case mode.MEDITATION:\r\n                return \"primary\"\r\n            default:\r\n                return \"secondary\"\r\n        }\r\n    }\r\n\r\n    const getModeAnimationClass = actualMode => {\r\n        switch (actualMode) {\r\n            case mode.WORK:\r\n                return \"work\"\r\n            case mode.BREAK:\r\n                return \"break\"\r\n            case mode.MEDITATION:\r\n                return \"meditation\"\r\n            default:\r\n                return \"work\"\r\n        }\r\n    }\r\n \r\n\r\n    return (\r\n        <div className={getModeAnimationClass(actualMode)}>\r\n            <Typography variant=\"h2\" component=\"p\" align=\"center\">\r\n                {getActualTimeOnActualMode()}\r\n            </Typography>\r\n            <Typography variant=\"h4\" component=\"p\" align=\"center\" color={getModeColor(actualMode)}>\r\n                {actualMode}\r\n            </Typography>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                spacing={3}\r\n            >\r\n                <Grid item xs container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\">\r\n                    <TimePicker mode=\"MEDITATION\" actualMode={actualMode} isPause={isPause} getTime={getMeditationBreakTimeLabel} onTimeChange={onMeditationTimeChange} />\r\n                </Grid>\r\n                <Grid item xs\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\">\r\n                    <TimePicker mode={mode.WORK} actualMode={actualMode} isPause={isPause} getTime={getActualWorkTimeLabel} onTimeChange={onWorkTimeChange} />\r\n                </Grid>\r\n                <Grid item xs container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\">\r\n                    <TimePicker mode={mode.BREAK} actualMode={actualMode} isPause={isPause} getTime={getActualBreakTimeLabel} onTimeChange={onBreakTimeChange} />\r\n                </Grid>\r\n            </Grid>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                spacing={3}\r\n            >\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onStopTimer} >\r\n                    {isPause ? \"start\" : \"pause\"}\r\n                </Button>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer","import React from \"react\"\r\nimport { getTimeMode, getTime, getTimeToSet } from \"../services/timeServices\"\r\nimport { mode } from \"../constants/mode\"\r\n\r\nconst initialWorkTime = 900\r\nconst initialMeditationTime = 30\r\nconst initialBreakTime = 300\r\n\r\nconst useTimer = () => {\r\n    const [actualWorkTime, setActualWorkTime] = React.useState(initialWorkTime)\r\n    const [settedWorkTime, setSettedWorkTime] = React.useState(initialWorkTime)\r\n    const [actualBreakTime, setActualBreakTime] = React.useState(initialBreakTime)\r\n    const [settedBreakTime, setSettedBreakTime] = React.useState(initialBreakTime)\r\n    const [actualMeditationTime, setActualMeditationTime] = React.useState(initialMeditationTime)\r\n    const [settedMeditationTime, setSettedMeditationTime] = React.useState(initialMeditationTime)\r\n\r\n    const [actualMode, setActualMode] = React.useState(mode.MEDITATION)\r\n\r\n    const [isPause, setIsPause] = React.useState(true)\r\n\r\n    React.useEffect(() => {\r\n        if (actualWorkTime < 0) {\r\n            setActualMode(mode.BREAK)\r\n            setActualWorkTime(settedWorkTime)\r\n        }\r\n    }, [actualWorkTime])\r\n\r\n    React.useEffect(() => {\r\n        if (actualBreakTime < 0) {\r\n            setActualMode(mode.MEDITATION)\r\n            setActualBreakTime(settedBreakTime)\r\n        }\r\n    }, [actualBreakTime])\r\n\r\n    React.useEffect(() => {\r\n        if (actualMeditationTime < 0) {\r\n            setActualMode(mode.WORK)\r\n            setActualMeditationTime(settedMeditationTime)\r\n        }\r\n    }, [actualMeditationTime])\r\n\r\n\r\n    React.useEffect(() => {\r\n        let timer = null;\r\n        if (!isPause) {\r\n            timer = setInterval(() => {\r\n                if (actualMode === mode.WORK) {\r\n                    setActualWorkTime(actualWorkTime => actualWorkTime - 1)\r\n                } else if (actualMode === mode.MEDITATION) {\r\n                    setActualMeditationTime(actualMeditationTime => actualMeditationTime - 1)\r\n                } else {\r\n                    setActualBreakTime(actualWorkTime => actualWorkTime - 1)\r\n                }\r\n            }, 1000)\r\n        } else if (isPause) {\r\n            clearInterval(timer)\r\n        }\r\n\r\n        return () => clearInterval(timer);\r\n    }, [actualMode, isPause])\r\n\r\n    const onStopTimer = () => {\r\n        setIsPause(!isPause)\r\n    }\r\n\r\n    const getActualTimeOnActualMode = () => {\r\n        const modeTime = getTimeMode({ modeToCheck: actualMode, actualWorkTime, actualBreakTime, actualMeditationTime })\r\n        return getTime(modeTime)\r\n    }\r\n\r\n    const onWorkTimeChange = event => {\r\n        const timeToSet = getTimeToSet(event)\r\n\r\n        setActualWorkTime(timeToSet)\r\n        setSettedWorkTime(timeToSet)\r\n    }\r\n\r\n    const onBreakTimeChange = event => {\r\n        const timeToSet = getTimeToSet(event)\r\n\r\n        setActualBreakTime(timeToSet)\r\n        setSettedBreakTime(timeToSet)\r\n    }\r\n\r\n    const onMeditationTimeChange = event => {\r\n        const timeToSet = getTimeToSet(event)\r\n\r\n        setActualMeditationTime(timeToSet)\r\n        setSettedMeditationTime(timeToSet)\r\n    }\r\n\r\n    const getActualWorkTimeLabel = () => {\r\n        const modeTime = getTimeMode({ modeToCheck: mode.WORK, actualWorkTime, actualBreakTime, actualMeditationTime })\r\n        return getTime(modeTime)\r\n    }\r\n\r\n    const getActualBreakTimeLabel = () => {\r\n        const modeTime = getTimeMode({ modeToCheck: mode.BREAK, actualWorkTime, actualBreakTime, actualMeditationTime })\r\n        return getTime(modeTime)\r\n    }\r\n\r\n    const getMeditationBreakTimeLabel = () => {\r\n        const modeTime = getTimeMode({ modeToCheck: mode.MEDITATION, actualWorkTime, actualBreakTime, actualMeditationTime })\r\n        return getTime(modeTime)\r\n    }\r\n\r\n    return { onMeditationTimeChange, getMeditationBreakTimeLabel, onBreakTimeChange, isPause, getActualWorkTimeLabel, getActualBreakTimeLabel, onStopTimer, onWorkTimeChange, actualMode, getActualTimeOnActualMode }\r\n}\r\n\r\nexport { useTimer }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Timer from './components/Timer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Timer />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}